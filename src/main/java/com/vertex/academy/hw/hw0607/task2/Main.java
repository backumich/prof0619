/*  Task2
Будем “рисовать” фигуры в 2D. Для этого нам понадобиться:
class Point - immutable
interface Figure
classes Rectangular, Oval, Circle, Square: все из них используют Point. У круга и овала это центр,
у прямоугольника и квадрата  - нижний левый угол.

Овал задается центром, ​шириной(по горизонтальнойоси) и высотой (по вертикальной оси) у фигур есть внутренний билдер.
прямоугольник - обертка над квадратом (расширяет его методы) как и овал - обертка над кругом.
Мы можем менять па/раметры фигур (двигать точку и менять длину сторон или радиус(ы)
Так-же есть singleton factory для фигур, которая по типу фигур выдает нужную.
Так-же есть Artist (художник), который при загрузке инициализирует достаточно большой массив из фигур (пусть 100 штук)
с помощью фактори, конечно =)
Так-же есть управляющий класс, в мейне которого создается художник и он вызывает на нем метод “рисуй”,
передавая ему число фигур, которое он должен нарисовать. Тот берет фигуры из массива (заполненного при инициализации)
и нарисованная фигура удаляется из него.
Если у художника закончились фигуры, то он берет еще 100 (или сколько вы определите при инициализации).
Фигуры “рисуются” простым выводом в консоль названия фигуры и всех определяющих параметров
(то есть, нужно определить toString и использовать его)
Но так как художник “загружает много данных” при инициализации, на него нужн онаписать прокси и сеттить именно прокси.

Если будет скучно, то давайте предположим, что мы рисуем на холст с определенными размерами,
с которыми инициализируетс художнику. И если фигура не влазит в этот холст, то художник сначала перемещает центр
(левый нижний угол) фигуры так, чтобы она влезла. Если это не помогает, то он меняет и размеры фигуры пропорционально.
 */

package com.vertex.academy.hw.hw0607.task2;


public class Main {
    public static void main(String[] args) {
        Oval oval1 = new Oval.Builder()
                .withHeigth(10)
                .withWidth(15)
                .withCentre(14,15)
                .build();

        System.out.println(oval1.getCentre().getAsixX());

    }
}
